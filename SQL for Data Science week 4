Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000


SELECT COUNT (*) AS total_records
FROM attribute

SELECT COUNT (*) AS total_records
FROM business

SELECT COUNT (*) AS total_records
FROM category

SELECT COUNT (*) AS total_records
FROM checkin

SELECT COUNT (*) AS total_records
FROM elite_years

SELECT COUNT (*) AS total_records
FROM friend
 
SELECT COUNT (*) AS total_records
FROM hours

SELECT COUNT (*) AS total_records
FROM user

SELECT COUNT (*) AS total_records
FROM tip

SELECT COUNT (*) AS total_records
FROM review

SELECT COUNT (*) AS total_records
FROM photo
+---------------+
| total_records |
+---------------+ for each table
|         10000 |
+---------------+


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
  v. Review = id: 10000 ; business_id: 8090 ; user_id: 9581
vi. Checkin = 493
  vii. Photo = id: 10000 ; business_id: 6493
  viii. Tip = id: 10000 ; user_id: 537 ; business_id: 3979
ix. User = 10000
    x. Friend = user_id: 11
    xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.

SELECT COUNT(distinct business_id)
AS total_records
FROM hours;
+---------------+
| total_records |
+---------------+
|          1562 |
+---------------+
SELECT COUNT(distinct business_id)
AS total_records
FROM attribute;

SELECT COUNT(distinct business_id)
AS total_records
FROM category;

SELECT COUNT(distinct business_id), COUNT(distinct user_id)
FROM review;
+-----------------------------+-------------------------+
| COUNT(distinct business_id) | COUNT(distinct user_id) |
+-----------------------------+-------------------------+
|                        8090 |                    9581 |
+-----------------------------+-------------------------+

SELECT COUNT(distinct business_id)
AS total_records
FROM checkin ; 
+---------------+
| total_records |
+---------------+
|           493 |
+---------------+

SELECT COUNT(distinct business_id) , COUNT(*)
FROM photo ;
+-----------------------------+----------+
| COUNT(distinct business_id) | COUNT(*) |
+-----------------------------+----------+
|                        6493 |    10000 |
+-----------------------------+----------+

SELECT
COUNT(distinct user_id), COUNT(distinct business_id), COUNT(*)
AS total_records
FROM tip ; 
+-------------------------+-----------------------------+---------------+
| COUNT(distinct user_id) | COUNT(distinct business_id) | total_records |
+-------------------------+-----------------------------+---------------+
|                     537 |                        3979 |         10000 |
+-------------------------+-----------------------------+---------------+

SELECT COUNT(*) 
AS total_records
FROM user

SELECT COUNT(distinct user_id) 
AS total_records
FROM friends; 

SELECT COUNT(distinct user_id) 
AS total_records
FROM elite_years; 


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
SELECT COUNT(*)
FROM user
WHERE id is NULL
OR name is NULL
OR review_count is NULL
OR yelping_since is NULL
OR useful is NULL
OR funny is NULL
OR cool is NULL
OR fans is NULL
OR average_stars is NULL
OR Compliment_hot is NULL
OR compliment_more is NULL
OR compliment_profile is NULL
OR compliment_cute is NULL
OR compliment_list is NULL
OR compliment_note is NULL
OR compliment_plain is NULL
OR compliment_cool is NULL
OR compliment_funny is NULL
OR compliment_writer is NULL
OR compliment_photos is NULL
+----------+
| COUNT(*) |
+----------+
|        0 |
+----------+

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
  SELECT MIN(stars), MAX(stars), AVG(stars)
  FROM review ;
	
		min: 1.0		max: 5.0		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
    

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
SELECT city, 
SUM (review_count) AS reviews
FROM business
GROUp BY city
ORDER BY reviews DESC ; 
	
	
	Copy and Paste the Result Below:    
	+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)


6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars AS star_rating, 
COUNT(stars) AS [count]
FROM business
WHERE city = 'Avon' 
GROUP BY stars; 


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT stars AS star_rating, 
COUNT(stars) AS [count]
FROM business
WHERE city = 'Beachwood' 
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT name, 
id, 
review_count
FROM user 
ORDER BY review_count DESC ;
		
	Copy and Paste the Result Below:
+-----------+------------------------+--------------+
| name      | id                     | review_count |
+-----------+------------------------+--------------+
| Gerald    | -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| Sara      | -3s52C4zL_DHRK0ULG6qtg |         1629 |
| Yuri      | -8lbUNlXVSoXqaRRiHiSNg |         1339 |


8. Does posing more reviews correlate with more fans? No

	Please explain your findings and interpretation of the results:
	N/A
SELECT name, review_count, fans
FROM user
ORDER BY fans DESC ;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)
	
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with word "love" 

	
	SQL code used to arrive at answer:
	SELECT (SELECT COUNT(text)
        FROM review
        WHERE text like "%love%") AS love_text,
        (SELECT COUNT(text)
        FROM review
        WHERE text like "%hate%") AS hate_text;
	
+-----------+-----------+
| love_text | hate_text |
+-----------+-----------+
|      1780 |       232 |
+-----------+-----------+


10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT name, fans
FROM user
ORDER BY fans DESC ;
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?


ii. Do the two groups you chose to analyze have a different number of reviews?
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:
